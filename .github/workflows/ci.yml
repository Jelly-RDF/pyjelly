name: ci

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  FORCE_COLOR: 1
  PY_COLORS: 1
  UV_LOCKED: 1
  UV_NO_SYNC: 1

defaults:
  run:
    shell: bash

jobs:
  check:
    if: ${{ !cancelled() }}
    name: ${{ matrix.conformance-tests && '(conformance) ' || '' }}${{ matrix.version }} ${{ matrix.platform }} ${{ matrix.backend == 'python' && '(py-backend)' || '' }}
    runs-on: ${{ matrix.platform }}

    env:
      UV_PYTHON: ${{ matrix.version }}

    strategy:
      fail-fast: false
      # https://blog.jaraco.com/efficient-use-of-ci-resources/
      matrix:
        conformance-tests: [false]
        version: ['3.9', '3.13']
        platform: [ubuntu-latest, macos-latest, windows-latest]
        backend: [cpp]
        include:
        - version: '3.10'
          platform: ubuntu-latest
        - version: '3.11'
          platform: ubuntu-latest
        - version: '3.12'
          platform: ubuntu-latest
        - version: '3.13'
          platform: ubuntu-latest
          conformance-tests: true
        - version: '3.13'
          platform: ubuntu-latest
          conformance-tests: true
          backend: python
        # rdflib appears to be broken on 3.14
        # - version: '3.14'
        #   platform: ubuntu-latest
        - version: pypy3.10
          platform: ubuntu-latest  
        - version: pypy3.11
          platform: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Windows walkaround for broken symlinks
      if: runner.os == 'Windows'
      run: |
        rm -r pyjelly/_proto
        rm -r tests/conformance_tests/rdf
        rm -r tests/conformance_tests/grpc
        cp -r submodules/protobuf/proto pyjelly/_proto
        cp -r submodules/protobuf/test/rdf tests/conformance_tests/rdf
        cp -r submodules/protobuf/test/grpc tests/conformance_tests/grpc

    - uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Install
      id: install
      run: uv sync

    - name: Install jelly-cli
      uses: jelly-rdf/setup-cli@v1
      if: ${{ !cancelled() && steps.install.conclusion == 'success' && matrix.conformance-tests }}

    - name: Select protobuf Python backend
      if: ${{ matrix.backend == 'python' }}
      run: echo "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python" >> "$GITHUB_ENV"

    - name: Run unit tests
      run: uv run pytest -vv
      if: ${{ !cancelled() && steps.install.conclusion == 'success' && !matrix.conformance-tests }}

    - name: Run unit tests (with conformance tests and coverage)
      run: uv run pytest -vv --cov --cov-branch --cov-report=xml
      if: ${{ !cancelled() && steps.install.conclusion == 'success' && matrix.conformance-tests }}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      if: ${{ !cancelled() && steps.install.conclusion == 'success' && matrix.conformance-tests }}
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check formatting
      id: formatting
      run: uv run ruff format . --diff
      if: ${{ !cancelled() && steps.install.conclusion == 'success' }}

    - name: Lint
      id: linting
      run: uv run ruff check --output-format github
      if: ${{ !cancelled() && steps.install.conclusion == 'success' }}

    - name: Check type safety
      id: types
      run: uv run mypy .
      if: ${{ !cancelled() && steps.install.conclusion == 'success' }}

  check-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: true
          persist-credentials: false

      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install
        id: install
        run: uv sync --group docs

      - name: Check docs build
        run: uv run mkdocs build -s

      - name: Check docs for dead links
        run: |
          uv run mkdocs serve &
          sleep 10
          uv run linkchecker \
            --no-warning \
            --check-extern \
            --ignore "https://doi.org" \
            http://localhost:8000
          kill $!

  mac-windows-linux-publish:
    needs: [check]
    runs-on: ${{ matrix.builds.os }}
    strategy:
      fail-fast: false
      matrix:
        builds:
          - { os: "macOS-latest" }
          - { os: "windows-latest" }
          - { os: "ubuntu-latest" }
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install deps
        run: python -m pip install "cibuildwheel>=2.16,<3"
      - name: Build wheels (with tests)
        env:
          CIBW_BUILD: "cp3*"
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_TEST_COMMAND: "pytest -q {project}/tests"
        run: python -m cibuildwheel --output-dir wheelhouse
      - name: Upload built wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ runner.os }}
          path: wheelhouse/*

pure-python-wheel-publish:
  needs: [check]
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v5
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Install deps
      run: python -m pip install wheel==0.37.1 pytest
    - name: Build pure python wheel
      env:
        SKIP_COMPILE: "1"
      run: pip wheel -w wheelhouse .
    - name: Test pure python wheel
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --no-index --find-links wheelhouse pyjelly
        pytest -q
    - name: Upload built wheels (pure)
      uses: actions/upload-artifact@v4
      with:
        name: wheels-pure
        path: wheelhouse/*

pypi-publish:
  if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
  needs: [mac-windows-linux-publish, pure-python-wheel-publish]
  runs-on: ubuntu-latest
  permissions:
    id-token: write
    contents: read
  steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist
    - name: Show artifacts
      run: ls -l dist
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        skip-existing: true

